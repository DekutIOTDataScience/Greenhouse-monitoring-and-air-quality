#include "select_program.h"

#if PROGRAM == AIR_QUALITY

#include "lorawan_network.h"
#include "dust_sensor.h"
#include "standby.h"

#define     STANDBY_TIME_S          15 * 60

extern EventQueue ev_queue;

static uint32_t DEVADDR_1 = 0x26011564;
static uint8_t NWKSKEY_1[] = { 0x0a, 0x7c, 0xcf, 0x52, 0x42, 0xd9, 0x22, 0x21, 0xec, 0xe9, 0x5d, 0x11, 0x11, 0xf1, 0x04, 0x28 };
static uint8_t APPSKEY_1[] = { 0xff, 0x45, 0x99, 0xec, 0x81, 0xca, 0xd3, 0x34, 0x5d, 0x5a, 0x24, 0x47, 0x3b, 0xd0, 0x86, 0xd0 };

static uint32_t DEVADDR_10 = 0x260119a1;
static uint8_t NWKSKEY_10[] = { 0xf0, 0xcb, 0x5b, 0xf4, 0xfb, 0x1a, 0x62, 0x1e, 0xfa, 0xdb, 0x61, 0x62, 0x64, 0xf2, 0xec, 0xd3 };
static uint8_t APPSKEY_10[] = { 0x12, 0x41, 0xdc, 0xa2, 0xb3, 0x17, 0x3a, 0x34, 0x36, 0x99, 0x65, 0x50, 0x53, 0x5a, 0xab, 0x81 };

static uint32_t DEVADDR_11 = 0x26011abb;
static uint8_t NWKSKEY_11[] = { 0x00, 0xca, 0x4f, 0x91, 0xe3, 0x55, 0x4f, 0x73, 0x9f, 0x31, 0xe6, 0x8d, 0x28, 0xbf, 0x2f, 0xa5 };
static uint8_t APPSKEY_11[] = { 0x2e, 0xde, 0x5e, 0x4c, 0xc5, 0x09, 0xd5, 0xd7, 0x6b, 0xb2, 0x1e, 0xfb, 0xf6, 0x08, 0x45, 0x71 };

static uint32_t DEVADDR_12 = 0x26011260;
static uint8_t NWKSKEY_12[] = { 0xdb, 0xc5, 0x52, 0xce, 0x8a, 0x6b, 0x90, 0xd9, 0xf5, 0xa0, 0xaf, 0xaa, 0xf1, 0x7e, 0xca, 0x4b };
static uint8_t APPSKEY_12[] = { 0xb8, 0x0d, 0x88, 0x11, 0xba, 0xc4, 0x66, 0x88, 0x88, 0xee, 0x65, 0xa9, 0xe4, 0x3a, 0xcb, 0xbc };

static uint32_t DEVADDR_13 = 0x260112f2;
static uint8_t NWKSKEY_13[] = { 0x3f, 0x4a, 0x74, 0x77, 0x61, 0xa7, 0x01, 0x47, 0xdd, 0xe1, 0xce, 0xe0, 0x92, 0xd6, 0x20, 0x27 };
static uint8_t APPSKEY_13[] = { 0xf8, 0xb6, 0xcf, 0xc5, 0xe0, 0x51, 0x2d, 0x49, 0x2a, 0x20, 0xd9, 0x9e, 0x2e, 0x6d, 0xc9, 0xf2 };

static uint32_t DEVADDR_14 = 0x26011878;
static uint8_t NWKSKEY_14[] = { 0x26, 0xd5, 0xcb, 0x23, 0x81, 0x8b, 0x1f, 0xde, 0xb8, 0x3d, 0xd7, 0xa6, 0x2c, 0x13, 0x62, 0xfc };
static uint8_t APPSKEY_14[] = { 0xe6, 0xf2, 0xe8, 0xb9, 0x77, 0xe1, 0x78, 0xb9, 0x7d, 0xef, 0xcd, 0xd8, 0x48, 0xd2, 0x64, 0x52 };

static uint32_t DEVADDR_15 = 0x26011c7a;
static uint8_t NWKSKEY_15[] = { 0x23, 0xa0, 0x43, 0x49, 0x6c, 0xe8, 0x25, 0x56, 0x00, 0x8e, 0x54, 0x7f, 0xa4, 0x25, 0x4b, 0xfe };
static uint8_t APPSKEY_15[] = { 0x06, 0xe2, 0x21, 0xbb, 0x1a, 0x07, 0xe5, 0xa3, 0xa1, 0x67, 0x42, 0xbf, 0xed, 0x43, 0xfa, 0x73 };

static uint32_t DEVADDR_16 = 0x26011751;
static uint8_t NWKSKEY_16[] = { 0xc6, 0xae, 0x57, 0xc8, 0x15, 0xa8, 0x06, 0x1a, 0x3b, 0x0a, 0xf9, 0xef, 0x33, 0xc3, 0x51, 0x2f };
static uint8_t APPSKEY_16[] = { 0x07, 0x5c, 0x6c, 0x58, 0x82, 0xb9, 0x00, 0x9c, 0xfb, 0x94, 0x74, 0x22, 0xbb, 0xf2, 0xe9, 0x51 };

static uint32_t DEVADDR_17 = 0x2601110f;
static uint8_t NWKSKEY_17[] = { 0x38, 0x6a, 0x54, 0xf6, 0x41, 0x2a, 0xea, 0xed, 0x21, 0x0e, 0x65, 0xd1, 0x64, 0xd4, 0x9d, 0x53 };
static uint8_t APPSKEY_17[] = { 0x8f, 0x80, 0x82, 0xbd, 0xd7, 0x77, 0x2c, 0xc7, 0x93, 0x04, 0x5f, 0x27, 0x95, 0x61, 0xa5, 0x9e };

static uint32_t DEVADDR_18 = 0x260115cf;
static uint8_t NWKSKEY_18[] = { 0x3a, 0x45, 0x1b, 0x02, 0xe0, 0xad, 0x2b, 0xb3, 0xe6, 0x71, 0xcf, 0x3a, 0xd7, 0x7f, 0x72, 0x71 };
static uint8_t APPSKEY_18[] = { 0x47, 0xd9, 0xb3, 0x91, 0x8f, 0xbd, 0xcc, 0x00, 0xdf, 0x74, 0x66, 0x37, 0xa2, 0xaf, 0x72, 0xe2 };

static uint32_t DEVADDR_19 = 0x26011738;
static uint8_t NWKSKEY_19[] = { 0xc8, 0x31, 0x4a, 0x77, 0xc6, 0x65, 0xdf, 0xb7, 0xdc, 0xb1, 0xb2, 0x53, 0xe8, 0xbf, 0x33, 0x24 };
static uint8_t APPSKEY_19[] = { 0xaa, 0x8e, 0xc6, 0x55, 0x6e, 0x93, 0xf0, 0x1a, 0x83, 0xd2, 0x49, 0x02, 0x32, 0xad, 0xb4, 0x63 };

static uint32_t DEVADDR_2 = 0x2601171a;
static uint8_t NWKSKEY_2[] = { 0x84, 0x68, 0xec, 0xc7, 0x9c, 0x35, 0x27, 0x48, 0x87, 0xa2, 0x39, 0x7e, 0x4d, 0xd1, 0x09, 0xf2 };
static uint8_t APPSKEY_2[] = { 0x5a, 0xad, 0x6c, 0xef, 0x19, 0x1e, 0x46, 0xa1, 0xb3, 0x4e, 0x2f, 0xd8, 0x49, 0x83, 0xc2, 0x4e };

static uint32_t DEVADDR_20 = 0x2601186e;
static uint8_t NWKSKEY_20[] = { 0x5e, 0xaf, 0x48, 0x53, 0xbe, 0x0a, 0xae, 0xf8, 0x82, 0xe3, 0x8a, 0xdd, 0x55, 0x81, 0xe0, 0x93 };
static uint8_t APPSKEY_20[] = { 0xc2, 0xd7, 0x6e, 0xe7, 0xbf, 0xad, 0xe5, 0x68, 0x7f, 0x15, 0xe8, 0x54, 0x84, 0xb2, 0x76, 0x60 };

static uint32_t DEVADDR_3 = 0x260114b5;
static uint8_t NWKSKEY_3[] = { 0x64, 0x5a, 0x5b, 0x9a, 0xf9, 0xfe, 0x1c, 0x1a, 0xb6, 0x76, 0x76, 0x14, 0xa1, 0xb8, 0x23, 0xb9 };
static uint8_t APPSKEY_3[] = { 0x4f, 0xe8, 0x5f, 0x68, 0x0f, 0xd7, 0xbf, 0x70, 0x14, 0xe9, 0xb8, 0xa5, 0x13, 0xe3, 0x7f, 0xb9 };

static uint32_t DEVADDR_4 = 0x2601188d;
static uint8_t NWKSKEY_4[] = { 0x99, 0xf7, 0xbf, 0xb4, 0xb2, 0x91, 0x65, 0xce, 0x5b, 0xb9, 0x16, 0x21, 0xcb, 0x07, 0x72, 0x97 };
static uint8_t APPSKEY_4[] = { 0x7f, 0x61, 0x4c, 0x7f, 0xa7, 0xc3, 0x30, 0x8f, 0x50, 0x87, 0x6e, 0xe2, 0x91, 0xc9, 0x47, 0x77 };

static uint32_t DEVADDR_5 = 0x260114a0;
static uint8_t NWKSKEY_5[] = { 0xc5, 0xe7, 0x00, 0xd8, 0xdd, 0x89, 0x95, 0xe5, 0x31, 0xb2, 0x23, 0xcf, 0x6b, 0x05, 0x33, 0x4a };
static uint8_t APPSKEY_5[] = { 0xa5, 0xae, 0xab, 0x43, 0x2f, 0x00, 0xdf, 0xab, 0x46, 0x85, 0x93, 0x59, 0x4d, 0x98, 0x13, 0x8b };

static uint32_t DEVADDR_6 = 0x2601150a;
static uint8_t NWKSKEY_6[] = { 0x62, 0x56, 0xf9, 0x87, 0x00, 0x65, 0x6a, 0x39, 0x76, 0xc5, 0xe0, 0x16, 0x42, 0x6c, 0x86, 0xe8 };
static uint8_t APPSKEY_6[] = { 0x92, 0x5c, 0x11, 0x47, 0x8e, 0x7a, 0x84, 0x77, 0xfa, 0xc8, 0xff, 0x2e, 0xe7, 0x19, 0x84, 0x86 };

static uint32_t DEVADDR_7 = 0x260110d2;
static uint8_t NWKSKEY_7[] = { 0x7d, 0x57, 0x5b, 0x94, 0xa6, 0xa0, 0x35, 0x65, 0xfd, 0x7e, 0x3a, 0x5d, 0x58, 0xae, 0xbf, 0xa7 };
static uint8_t APPSKEY_7[] = { 0x00, 0x00, 0x56, 0x66, 0x15, 0xd5, 0xcb, 0x45, 0x50, 0xf9, 0xef, 0x51, 0x71, 0x9f, 0x03, 0xf5 };

static uint32_t DEVADDR_8 = 0x26011456;
static uint8_t NWKSKEY_8[] = { 0xa9, 0x8a, 0x12, 0xa3, 0xf7, 0xcd, 0x9c, 0x79, 0x07, 0x47, 0x0a, 0x83, 0x81, 0x6b, 0x19, 0xa6 };
static uint8_t APPSKEY_8[] = { 0x0e, 0xd1, 0x71, 0xab, 0x6b, 0x61, 0xef, 0x26, 0x58, 0x9f, 0xf0, 0x93, 0x6c, 0xd7, 0x65, 0x24 };

static uint32_t DEVADDR_9 = 0x26011a17;
static uint8_t NWKSKEY_9[] = { 0xba, 0x52, 0x30, 0xe2, 0x9b, 0x1c, 0xa2, 0xdb, 0x70, 0xef, 0x02, 0x60, 0xac, 0x0d, 0x43, 0x26 };
static uint8_t APPSKEY_9[] = { 0xf5, 0x2b, 0xed, 0x87, 0xf0, 0xda, 0x04, 0x8c, 0xd5, 0x65, 0xbd, 0x88, 0xa6, 0xe0, 0x12, 0xfc };


DustSensor *dust = new DustSensor(D7);

float dust_concentration = 0.0f;
bool dust_updated = false;

void dust_sensor_cb(int lpo, float ratio, float concentration) {
    dust_concentration = concentration;
    dust_updated = true;
}

void check_for_updated_dust() {
    if (dust_updated) {
        dust_updated = false;
        printf("Measured concentration = %.2f pcs/0.01cf\n", dust_concentration);

        CayenneLPP payload(50);
        payload.addAnalogInput(1, dust_concentration / 100.0f); // save space

        if (!lorawan_send(&payload)) {
            delete dust;
            standby(STANDBY_TIME_S);
        }
    }
}

static void lora_event_handler(lorawan_event_t event) {
    switch (event) {
        case CONNECTED:
            printf("[LNWK][INFO] Connection - Successful\n");
            break;
        case DISCONNECTED:
            ev_queue.break_dispatch();
            printf("[LNWK][INFO] Disconnected Successfully\n");
            break;
        case TX_DONE:
            printf("[LNWK][INFO] Message Sent to Network Server\n");

            delete dust;
            standby(STANDBY_TIME_S);
            break;
        case TX_TIMEOUT:
        case TX_ERROR:
        case TX_CRYPTO_ERROR:
        case TX_SCHEDULING_ERROR:
            printf("[LNWK][INFO] Transmission Error - EventCode = %d\n", event);

            delete dust;
            standby(STANDBY_TIME_S);
            break;
        case RX_DONE:
            printf("[LNWK][INFO] Received message from Network Server\n");
            receive_message();
            break;
        case RX_TIMEOUT:
        case RX_ERROR:
            printf("[LNWK][INFO] Error in reception - Code = %d\n", event);
            break;
        case JOIN_FAILURE:
            printf("[LNWK][INFO] OTAA Failed - Check Keys\n");
            break;
        default:
            MBED_ASSERT("Unknown Event");
    }
}

int main() {
    set_time(0);

    printf("=========================================\n");
    printf("      DSA 2018 Air Quality Sensor        \n");
    printf("=========================================\n");

    lorawan_setup(
        DEVADDR_20,
        NWKSKEY_20,
        APPSKEY_20,
        &lora_event_handler);

    printf("Measuring dust...\n");
    dust->measure(&dust_sensor_cb);

    ev_queue.call_every(3000, &check_for_updated_dust);

    ev_queue.dispatch_forever();
}


#endif
